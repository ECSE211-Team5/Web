.TH "ca.mcgill.ecse211.project.ColorCalibrator" 3 "Tue Nov 27 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.ColorCalibrator
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBColor\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static Color \fBgetColor\fP (int r, int g, int b)"
.br
.ti -1c
.RI "static Color \fBgetColor\fP ()"
.br
.ti -1c
.RI "static void \fBsetFrequency\fP (Color c)"
.br
.ti -1c
.RI "static Color \fBgetMostFrequenct\fP ()"
.br
.ti -1c
.RI "static void \fBresetFrequency\fP ()"
.br
.ti -1c
.RI "static Color \fBgetGetColor\fP (int i)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is used to check the color of a ring under a light sensor
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 13 of file ColorCalibrator\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getColor (int r, int g, int b)\fC [static]\fP"
This method returns the color of the ring currently under the light sensor Instead of intervals, we use a pattern matching for detecting the color For more: reference the software and testing document
.PP
\fBParameters:\fP
.RS 4
\fIr\fP The red value to check for a ring 
.br
\fIg\fP The green value to check for a ring 
.br
\fIb\fP The blue value to check for a ring 
.RE
.PP
\fBReturns:\fP
.RS 4
A Color enumeration value 
.RE
.PP

.PP
Definition at line 38 of file ColorCalibrator\&.java\&.
.PP
.nf
38                                                     {
39     if (r > 3 * g && b < 3 && r > lowerOrangeRBound) {
40       currentColor = Color\&.Orange;
41     } else if (g > r && b < 3) {
42       currentColor = Color\&.Green;
43     } else if ((r >= lowerYellowRBound && g >= lowerYellowGBound)
44         || ((r >= 7 && r <= 9) && (g >= 0 && g <= 2))) {
45       currentColor = Color\&.Yellow;
46     } else if ((b >= lowerBlueBBound)) {
47       currentColor = Color\&.Blue;
48     } else {
49       currentColor = Color\&.Other;
50     }
51 
52     return currentColor;
53   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getColor ()\fC [static]\fP"
This method gets the last color of the ring under the light sensor
.PP
\fBReturns:\fP
.RS 4
current color detected by the lightSensor 
.RE
.PP

.PP
Definition at line 60 of file ColorCalibrator\&.java\&.
.PP
.nf
60                                  {
61     if (currentColor != null)
62       return currentColor;
63     else
64       return Color\&.Other;
65   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getGetColor (int i)\fC [static]\fP"
This method match integer to corresponding color
.PP
\fBParameters:\fP
.RS 4
\fIi\fP an integer of [0,4] 
.RE
.PP
\fBReturns:\fP
.RS 4
: cooresponding color of the integer 
.RE
.PP

.PP
Definition at line 128 of file ColorCalibrator\&.java\&.
.PP
.nf
128                                          {
129     Color c = Color\&.Other;
130     switch (i) {
131       case 0:
132         c = Color\&.Other;
133         break;
134       case 1:
135         c = Color\&.Blue;
136         break;
137       case 2:
138         c = Color\&.Green;
139         break;
140       case 3:
141         c = Color\&.Yellow;
142         break;
143       case 4:
144         c = Color\&.Orange;
145         break;
146     }
147     return c;
148   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getMostFrequenct ()\fC [static]\fP"
This method returns the most frequent colour detected from multiple samples
.PP
\fBReturns:\fP
.RS 4
most frequent colour detected 
.RE
.PP

.PP
Definition at line 96 of file ColorCalibrator\&.java\&.
.PP
.nf
96                                          {
97     Color c = Color\&.Other;
98     int frequency = colour_frequency[0];
99     for (int i = 0; i < colour_frequency\&.length; i++) {
100       if (colour_frequency[i] >= frequency) {
101         frequency = colour_frequency[i];
102         c = getGetColor(i);
103       }
104     }
105     if (frequency == 0) {
106       c = Color\&.Other;
107     }
108     resetFrequency();
109     return c;
110   }
.fi
.SS "static void ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.resetFrequency ()\fC [static]\fP"
This method resets the colour_frequency array to 0 
.PP
Definition at line 116 of file ColorCalibrator\&.java\&.
.PP
.nf
116                                       {
117     for (int i = 0; i < colour_frequency\&.length; i++) {
118       colour_frequency[i] = 0;
119     }
120   }
.fi
.SS "static void ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.setFrequency (Color c)\fC [static]\fP"
This method keeps track of how many of each colour were detected by increasing the count in the array
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The Color detected by the light sensor 
.RE
.PP

.PP
Definition at line 73 of file ColorCalibrator\&.java\&.
.PP
.nf
73                                            {
74     switch (c) {
75       case Blue:
76         colour_frequency[1]++;
77         break;
78       case Green:
79         colour_frequency[2]++;
80         break;
81       case Yellow:
82         colour_frequency[3]++;
83         break;
84       case Orange:
85         colour_frequency[4]++;
86       default:
87         break;
88     }
89   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
