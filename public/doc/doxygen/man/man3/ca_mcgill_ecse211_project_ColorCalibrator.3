.TH "ca.mcgill.ecse211.project.ColorCalibrator" 3 "Mon Nov 26 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.ColorCalibrator
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBColor\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static Color \fBgetColor\fP (int r, int g, int b)"
.br
.ti -1c
.RI "static Color \fBgetColor\fP ()"
.br
.ti -1c
.RI "static void \fBsetFrequency\fP (Color c)"
.br
.ti -1c
.RI "static Color \fBgetMostFrequenct\fP ()"
.br
.ti -1c
.RI "static void \fBresetFrequency\fP ()"
.br
.ti -1c
.RI "static Color \fBgetGetColor\fP (int i)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is used to check the color of a ring under a light sensor
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 13 of file ColorCalibrator\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getColor (int r, int g, int b)\fC [static]\fP"
This method returns the color of the ring currently under the light sensor Instead of intervals, we use a pattern matching for detecting the color For more: reference the software and testing document
.PP
\fBParameters:\fP
.RS 4
\fIr\fP The red value to check for a ring 
.br
\fIg\fP The green value to check for a ring 
.br
\fIb\fP The blue value to check for a ring 
.RE
.PP
\fBReturns:\fP
.RS 4
A Color enumeration value 
.RE
.PP

.PP
Definition at line 37 of file ColorCalibrator\&.java\&.
.PP
.nf
37                                                     {
38     if (r>3*g && b<3 && r>lowerOrangeRBound ) {
39       currentColor = Color\&.Orange;
40     } else if (g>r && b<3) {
41       currentColor = Color\&.Green;
42       }else if ((r>= lowerYellowRBound && g >= lowerYellowGBound) || ((r>= 7 && r <= 9) && (g >=0 && g <= 2))) {
43       currentColor = Color\&.Yellow;
44     } else if ( (b >= lowerBlueBBound )) {
45       currentColor = Color\&.Blue;
46     } else {
47       currentColor = Color\&.Other;
48     }
49 
50     return currentColor;
51   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getColor ()\fC [static]\fP"
This method gets the last color of the ring under the light sensor
.PP
\fBReturns:\fP
.RS 4
current color detected by the lightSensor 
.RE
.PP

.PP
Definition at line 58 of file ColorCalibrator\&.java\&.
.PP
.nf
58                                  {
59     if (currentColor != null)
60       return currentColor;
61     else
62       return Color\&.Other;
63   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getGetColor (int i)\fC [static]\fP"
This method match integer to corresponding color 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP an integer of [0,4] 
.RE
.PP
\fBReturns:\fP
.RS 4
: cooresponding color of the integer 
.RE
.PP

.PP
Definition at line 124 of file ColorCalibrator\&.java\&.
.PP
.nf
124                                          {
125     Color c = Color\&.Other;
126     switch (i) {
127       case 0:
128         c = Color\&.Other;
129         break;
130       case 1: 
131         c = Color\&.Blue;
132         break;
133       case 2:
134         c = Color\&.Green;
135         break;
136       case 3:
137         c = Color\&.Yellow;
138         break;
139       case 4:
140         c = Color\&.Orange;
141         break;
142     }
143     return c;
144   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getMostFrequenct ()\fC [static]\fP"
This method returns the most frequent colour detected from multiple samples
.PP
\fBReturns:\fP
.RS 4
most frequent colour detected 
.RE
.PP

.PP
Definition at line 93 of file ColorCalibrator\&.java\&.
.PP
.nf
93                                          {
94     Color c = Color\&.Other;
95     int frequency = colour_frequency[0];
96     for (int i = 0; i < colour_frequency\&.length; i++) {
97       if (colour_frequency[i] >= frequency) {
98         frequency = colour_frequency[i];
99         c = getGetColor(i);
100       }
101     }
102     if(frequency == 0) {
103       c = Color\&.Other;
104     }
105     resetFrequency();
106     return c;
107   }
.fi
.SS "static void ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.resetFrequency ()\fC [static]\fP"
This method resets the colour_frequency array to 0 
.PP
Definition at line 113 of file ColorCalibrator\&.java\&.
.PP
.nf
113                                       {
114     for (int i = 0; i < colour_frequency\&.length; i ++) {
115       colour_frequency[i] = 0;
116     }
117   }
.fi
.SS "static void ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.setFrequency (Color c)\fC [static]\fP"
This method keeps track of how many of each colour were detected by increasing the count in the array 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The Color detected by the light sensor 
.RE
.PP

.PP
Definition at line 70 of file ColorCalibrator\&.java\&.
.PP
.nf
70                                            {
71     switch (c) {
72       case Blue:
73         colour_frequency[1] ++;
74         break;
75       case Green:
76         colour_frequency[2] ++;
77         break;
78       case Yellow:
79         colour_frequency[3] ++;
80         break;
81       case Orange:
82         colour_frequency[4] ++;
83       default:
84         break;
85     }
86   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
