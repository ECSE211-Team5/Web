.TH "ca.mcgill.ecse211.project.ColorCalibrator" 3 "Thu Nov 29 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.ColorCalibrator
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBColor\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static Color \fBgetColor\fP (int r, int g, int b)"
.br
.ti -1c
.RI "static Color \fBgetColor\fP ()"
.br
.ti -1c
.RI "static void \fBsetFrequency\fP (Color c)"
.br
.ti -1c
.RI "static Color \fBgetMostFrequenct\fP ()"
.br
.ti -1c
.RI "static void \fBresetFrequency\fP ()"
.br
.ti -1c
.RI "static Color \fBgetGetColor\fP (int i)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is used to check the color of a ring under a light sensor
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 13 of file ColorCalibrator\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getColor (int r, int g, int b)\fC [static]\fP"
This method returns the color of the ring currently under the light sensor\&. We check the range of Red, Green and Blue values to deduce ring color\&. For more details see the software and testing document\&.
.PP
\fBParameters:\fP
.RS 4
\fIr\fP The red value to check 
.br
\fIg\fP The green value to check 
.br
\fIb\fP The blue value to check 
.RE
.PP
\fBReturns:\fP
.RS 4
A Color enumeration value 
.RE
.PP

.PP
Definition at line 37 of file ColorCalibrator\&.java\&.
.PP
.nf
37                                                     {
38     if (r > 2\&.5 * g && b < 3 && r > lowerOrangeRBound) {
39       currentColor = Color\&.Orange;
40     } else if ((b >= lowerBlueBBound)) {
41       currentColor = Color\&.Blue;
42     } else if (g > r && b < 3) {
43       currentColor = Color\&.Green;
44     } else if ((r >= lowerYellowRBound && g >= lowerYellowGBound)
45         || ((r >= 7 && r <= 9) && (g >= 0 && g <= 2))) {
46       currentColor = Color\&.Yellow;
47     } else {
48       currentColor = Color\&.Other;
49     }
50 
51     return currentColor;
52   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getColor ()\fC [static]\fP"
This method gets the last detected color of a ring previously inspected by the light sensor
.PP
\fBReturns:\fP
.RS 4
The last color detected by the lightSensor 
.RE
.PP

.PP
Definition at line 59 of file ColorCalibrator\&.java\&.
.PP
.nf
59                                  {
60     if (currentColor != null)
61       return currentColor;
62     else
63       return Color\&.Other;
64   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getGetColor (int i)\fC [static]\fP"
This method maps integers to color enumerations
.PP
\fBParameters:\fP
.RS 4
\fIi\fP An integer in the interval [0,4] 
.RE
.PP
\fBReturns:\fP
.RS 4
The corresponding color enumeration 
.RE
.PP

.PP
Definition at line 125 of file ColorCalibrator\&.java\&.
.PP
.nf
125                                          {
126     Color c = Color\&.Other;
127     switch (i) {
128       case 0:
129         c = Color\&.Other;
130         break;
131       case 1:
132         c = Color\&.Blue;
133         break;
134       case 2:
135         c = Color\&.Green;
136         break;
137       case 3:
138         c = Color\&.Yellow;
139         break;
140       case 4:
141         c = Color\&.Orange;
142         break;
143     }
144     return c;
145   }
.fi
.SS "static Color ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.getMostFrequenct ()\fC [static]\fP"
This method returns the most frequent ring color detected from multiple samples
.PP
\fBReturns:\fP
.RS 4
The most frequent ring color detected 
.RE
.PP

.PP
Definition at line 94 of file ColorCalibrator\&.java\&.
.PP
.nf
94                                          {
95     Color c = Color\&.Other;
96     int frequency = colour_frequency[0];
97     for (int i = 0; i < colour_frequency\&.length; i++) {
98       if (colour_frequency[i] >= frequency) {
99         frequency = colour_frequency[i];
100         c = getGetColor(i);
101       }
102     }
103     if (frequency == 0) {
104       c = Color\&.Other;
105     }
106     resetFrequency();
107     return c;
108   }
.fi
.SS "static void ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.resetFrequency ()\fC [static]\fP"
This method resets the colour_frequency array to 0 
.PP
Definition at line 113 of file ColorCalibrator\&.java\&.
.PP
.nf
113                                       {
114     for (int i = 0; i < colour_frequency\&.length; i++) {
115       colour_frequency[i] = 0;
116     }
117   }
.fi
.SS "static void ca\&.mcgill\&.ecse211\&.project\&.ColorCalibrator\&.setFrequency (Color c)\fC [static]\fP"
This method keeps track of how many rings of each color were detected\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The Color detected by the light sensor 
.RE
.PP

.PP
Definition at line 71 of file ColorCalibrator\&.java\&.
.PP
.nf
71                                            {
72     switch (c) {
73       case Blue:
74         colour_frequency[1]++;
75         break;
76       case Green:
77         colour_frequency[2]++;
78         break;
79       case Yellow:
80         colour_frequency[3]++;
81         break;
82       case Orange:
83         colour_frequency[4]++;
84       default:
85         break;
86     }
87   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
