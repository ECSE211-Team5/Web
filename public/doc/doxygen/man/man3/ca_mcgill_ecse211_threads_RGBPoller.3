.TH "ca.mcgill.ecse211.threads.RGBPoller" 3 "Thu Nov 8 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.threads.RGBPoller
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBca\&.mcgill\&.ecse211\&.threads\&.LightPoller\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRGBPoller\fP (SampleProvider \fBus\fP[], float[][] usData, \fBSensorData\fP \fBcont\fP)  throws OdometerExceptions "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBrunMethod\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class polls a light sensor that is used to detect colored rings\&.
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 16 of file RGBPoller\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.threads\&.RGBPoller\&.RGBPoller (SampleProvider us[], float usData[][], \fBSensorData\fP cont) throws \fBOdometerExceptions\fP"
This constructor creates an instance of the \fBRGBPoller\fP class to provide color data from an light sensor to our robot\&.
.PP
\fBParameters:\fP
.RS 4
\fIus\fP A SampleProvider class instance that helps us to store an array of ultrasonic sensor data\&. 
.br
\fIusData\fP An array to store light data\&. 
.br
\fIcont\fP A \fBSensorData\fP object that is used to process color data\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 28 of file RGBPoller\&.java\&.
.PP
.nf
28                                                                                                      {
29     super(us, usData, cont);
30   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.RGBPoller\&.runMethod ()\fC [protected]\fP"

.PP
Definition at line 33 of file RGBPoller\&.java\&.
.PP
.nf
33                              {
34     us[0]\&.fetchSample(lgData[0], 0); // acquire data at offset 0
35     // get RGB values from buffer, multiply by 100 for convenience and allow it to be cast to int
36     int r = (int) (lgData[0][0] * 100); // extract from buffer, cast to int
37     int g = (int) (lgData[0][1] * 100); // extract from buffer, cast to int
38     int b = (int) (lgData[0][2] * 100); // extract from buffer, cast to int
39     cont\&.setRGB(r, g, b); // now take action depending on value
40   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
