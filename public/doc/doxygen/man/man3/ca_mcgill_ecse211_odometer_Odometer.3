.TH "ca.mcgill.ecse211.odometer.Odometer" 3 "Thu Nov 29 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.odometer.Odometer
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\fP, and Runnable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBrun\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static synchronized \fBOdometer\fP \fBgetOdometer\fP (EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, final double TRACK, final double WHEEL_RAD)  throws OdometerExceptions "
.br
.ti -1c
.RI "static synchronized \fBOdometer\fP \fBgetOdometer\fP ()  throws OdometerExceptions "
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class implements odometry on our robot\&.
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 16 of file Odometer\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static synchronized \fBOdometer\fP ca\&.mcgill\&.ecse211\&.odometer\&.Odometer\&.getOdometer (EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, final double TRACK, final double WHEEL_RAD) throws \fBOdometerExceptions\fP\fC [static]\fP"
This method ensures that only one instance of the \fBOdometer\fP object is used throughout the code\&.
.PP
\fBParameters:\fP
.RS 4
\fIleftMotor\fP An EV3LargeRegularedMotor object instance that allows control of the left motor 
.br
\fIrightMotor\fP An EV3LargeRegularedMotor object instance that allows control of the right motor 
.RE
.PP
\fBReturns:\fP
.RS 4
A new or pre-existing \fBOdometer\fP object 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBOdometerExceptions\fP\fP 
.RE
.PP

.PP
Definition at line 69 of file Odometer\&.java\&.
.PP
.nf
71                                 {
72     if (odometer != null) { // Return existing object
73       return odometer;
74     } else { // create object and return it
75       odometer = new Odometer(leftMotor, rightMotor, TRACK, WHEEL_RAD);
76       return odometer;
77     }
78   }
.fi
.SS "static synchronized \fBOdometer\fP ca\&.mcgill\&.ecse211\&.odometer\&.Odometer\&.getOdometer () throws \fBOdometerExceptions\fP\fC [static]\fP"
This method returns a pre-existing \fBOdometer\fP object instance\&. It is meant to be used only if an \fBOdometer\fP object has already been created beforehand\&.
.PP
\fBReturns:\fP
.RS 4
error if no previous odometer exists 
.RE
.PP

.PP
Definition at line 86 of file Odometer\&.java\&.
.PP
.nf
86                                                                               {
87     if (odometer == null) {
88       throw new OdometerExceptions("No previous Odometer exits\&.");
89     }
90     return odometer;
91   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.Odometer\&.run ()"
This method is called when our \fBOdometer\fP object is started as a thread and begins to keep track of motor rotations 
.PP
Definition at line 97 of file Odometer\&.java\&.
.PP
.nf
97                     {
98     long updateStart, updateEnd;
99 
100     while (true) {
101       updateStart = System\&.currentTimeMillis();
102 
103       // Calculate new robot position based on tachometer counts
104       double distL, distR, deltaD, deltaT, dX, dY;
105       int nowTachoL, nowTachoR;
106       position = odometer\&.getXYT();
107 
108       // Calculate the change in distances and Theta with motor tacho counts
109       nowTachoL = leftMotor\&.getTachoCount();
110       nowTachoR = rightMotor\&.getTachoCount();
111       distL = 3\&.14159 * WHEEL_RAD * (nowTachoL - leftMotorTachoCount) / 180;
112       distR = 3\&.14159 * WHEEL_RAD * (nowTachoR - rightMotorTachoCount) / 180;
113       leftMotorTachoCount = nowTachoL;
114       rightMotorTachoCount = nowTachoR;
115       deltaD = 0\&.5 * (distL + distR);
116       deltaT = (distL - distR) / TRACK;
117 
118       double Theta = Math\&.toRadians(position[2]);
119       Theta += deltaT;
120       dX = deltaD * Math\&.sin(Theta);
121       dY = deltaD * Math\&.cos(Theta);
122 
123       // Update odometer values with new calculated values
124       odometer\&.update(dX / Game\&.TILE, dY / Game\&.TILE, Math\&.toDegrees(deltaT));
125 
126       // this ensures that the odometer only runs once every period
127       updateEnd = System\&.currentTimeMillis();
128       if (updateEnd - updateStart < ODOMETER_PERIOD) {
129         try {
130           Thread\&.sleep(ODOMETER_PERIOD - (updateEnd - updateStart));
131         } catch (InterruptedException e) {
132           // there is nothing to be done
133         }
134       }
135     }
136   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
