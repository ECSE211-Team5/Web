.TH "ca.mcgill.ecse211.project.Display" 3 "Tue Nov 27 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.Display
.SH SYNOPSIS
.br
.PP
.PP
Inherits Runnable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDisplay\fP (TextLCD lcd)  throws OdometerExceptions "
.br
.ti -1c
.RI "\fBDisplay\fP (TextLCD lcd, long timeout)  throws OdometerExceptions "
.br
.ti -1c
.RI "void \fBrun\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is used to display the content of the odometer variables (x, y, Theta) on an EV3 brick display
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 20 of file Display\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.project\&.Display\&.Display (TextLCD lcd) throws \fBOdometerExceptions\fP"
This is the class constructor for the \fBDisplay\fP class
.PP
\fBParameters:\fP
.RS 4
\fIlcd\fP A TextLCD object instance to control 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 36 of file Display\&.java\&.
.PP
.nf
36                                                         {
37     this\&.odo = Odometer\&.getOdometer();
38     this\&.sensdata = SensorData\&.getSensorData();
39     this\&.lcd = lcd;
40   }
.fi
.SS "ca\&.mcgill\&.ecse211\&.project\&.Display\&.Display (TextLCD lcd, long timeout) throws \fBOdometerExceptions\fP"
This is the overloaded class constructor for a display object
.PP
\fBParameters:\fP
.RS 4
\fIlcd\fP A TextLCD object instance to control 
.br
\fItimeout\fP A duration of time to update the display for 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 49 of file Display\&.java\&.
.PP
.nf
49                                                                       {
50     odo = Odometer\&.getOdometer();
51     this\&.timeout = timeout;
52     this\&.lcd = lcd;
53   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Display\&.run ()"
This method is called when the \fBDisplay\fP thread is started\&. 
.PP
Definition at line 58 of file Display\&.java\&.
.PP
.nf
58                     {
59     lcd\&.clear();
60 
61     long updateStart, updateEnd;
62 
63     long tStart = System\&.currentTimeMillis();
64 
65     do {
66       updateStart = System\&.currentTimeMillis();
67 
68       // Retrieve x, y and Theta information
69       position = odo\&.getXYT();
70       rgb = sensdata\&.getRGB();
71 
72       // Print x,y, and theta information
73       DecimalFormat numberFormat = new DecimalFormat("######0\&.00");
74       // The last two parameters to lcd\&.drawString denote the x and y coordinate to draw at\&.
75       // lcd\&.drawString("X: " + numberFormat\&.format(position[0]), 0, 0);
76       // lcd\&.drawString("Y: " + numberFormat\&.format(position[1]), 0, 1);
77       // lcd\&.drawString("T: " + numberFormat\&.format(position[2]), 0, 2);
78       // lcd\&.drawString("LL: " + numberFormat\&.format(sensdata\&.getL()[0]), 0, 3);
79       // lcd\&.drawString("LR: " + numberFormat\&.format(sensdata\&.getL()[1]), 0, 4);
80       // lcd\&.drawString("D: " + numberFormat\&.format(sensdata\&.getD()), 0, 5);
81 
82       lcd\&.drawString(String\&.format("(R: %d G: %d B: %d)", (int) rgb[0], (int) rgb[1], (int) rgb[2]),
83           0, 4);
84       // if (ColorCalibrator\&.getColor((int) rgb[0], (int) rgb[1],
85       // (int) rgb[2]) != ColorCalibrator\&.Color\&.Other) {
86       // lcd\&.drawString("Object Detected", 0, 5);
87       // } else {
88       // // Draw whitespace on our display
89       // lcd\&.drawString(" ", 0, 5);
90       // }
91 
92       lcd\&.drawString(String\&.format("%1$-10s", ColorCalibrator\&.getColor()\&.toString()), 0, 6);
93       lcd\&.drawString("A:" + numberFormat\&.format(sensdata\&.getA()), 0, 7);
94 
95       // lcd\&.drawString(String\&.format("(r: %d", (int)rgb[0]), 0, 3);
96       // lcd\&.drawString(String\&.format("(g: %d", (int)rgb[1]), 0, 4);
97       // lcd\&.drawString(String\&.format("(b: %d", (int)rgb[2]), 0, 5);
98 
99       // This ensures that the data is updated only once every period
100       updateEnd = System\&.currentTimeMillis();
101       if (updateEnd - updateStart < DISPLAY_PERIOD) {
102         try {
103           Thread\&.sleep(DISPLAY_PERIOD - (updateEnd - updateStart));
104         } catch (InterruptedException e) {
105           e\&.printStackTrace();
106         }
107       }
108     } while ((updateEnd - tStart) <= timeout);
109   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
