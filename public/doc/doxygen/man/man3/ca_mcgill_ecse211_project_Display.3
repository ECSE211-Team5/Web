.TH "ca.mcgill.ecse211.project.Display" 3 "Thu Nov 8 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.Display
.SH SYNOPSIS
.br
.PP
.PP
Inherits Runnable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDisplay\fP (TextLCD lcd)  throws OdometerExceptions "
.br
.ti -1c
.RI "\fBDisplay\fP (TextLCD lcd, long timeout)  throws OdometerExceptions "
.br
.ti -1c
.RI "void \fBrun\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is used to display the content of the odometer variables (x, y, Theta)
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 19 of file Display\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.project\&.Display\&.Display (TextLCD lcd) throws \fBOdometerExceptions\fP"
This is the class constructor for a display object that controls an EV3 brick display
.PP
\fBParameters:\fP
.RS 4
\fIlcd\fP A TextLCD object instance to control 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 35 of file Display\&.java\&.
.PP
.nf
35                                                         {
36     this\&.odo = Odometer\&.getOdometer();
37     this\&.sensdata = SensorData\&.getSensorData();
38     this\&.lcd = lcd;
39   }
.fi
.SS "ca\&.mcgill\&.ecse211\&.project\&.Display\&.Display (TextLCD lcd, long timeout) throws \fBOdometerExceptions\fP"
This is the overloaded class constructor for a display object
.PP
\fBParameters:\fP
.RS 4
\fIlcd\fP A TextLCD object instance to control 
.br
\fItimeout\fP A duration of time to update the display for 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 48 of file Display\&.java\&.
.PP
.nf
48                                                                       {
49     odo = Odometer\&.getOdometer();
50     this\&.timeout = timeout;
51     this\&.lcd = lcd;
52   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Display\&.run ()"
This method is called when the \fBDisplay\fP thread is started\&. 
.PP
Definition at line 57 of file Display\&.java\&.
.PP
.nf
57                     {
58     lcd\&.clear();
59 
60     long updateStart, updateEnd;
61 
62     long tStart = System\&.currentTimeMillis();
63 
64     do {
65       updateStart = System\&.currentTimeMillis();
66 
67       // Retrieve x, y and Theta information
68       position = odo\&.getXYT();
69       rgb = sensdata\&.getRGB();
70 
71       // Print x,y, and theta information
72       DecimalFormat numberFormat = new DecimalFormat("######0\&.00");
73       // The last two parameters to lcd\&.drawString denote the x and y coordinate to draw at\&.
74       lcd\&.drawString("X: " + numberFormat\&.format(position[0]), 0, 0);
75       lcd\&.drawString("Y: " + numberFormat\&.format(position[1]), 0, 1);
76       lcd\&.drawString("T: " + numberFormat\&.format(position[2]), 0, 2);
77       lcd\&.drawString("LL: " + numberFormat\&.format(sensdata\&.getL()[0]), 0, 3);
78       lcd\&.drawString("LR: " + numberFormat\&.format(sensdata\&.getL()[1]), 0, 4);
79       lcd\&.drawString("D: " + numberFormat\&.format(sensdata\&.getD()), 0, 5);
80 
81 //      lcd\&.drawString(String\&.format("(R: %d G: %d B: %d)", (int) rgb[0], (int) rgb[1], (int) rgb[2]),
82 //          0, 4);
83 //      if (ColorCalibrator\&.getColor((int) rgb[0], (int) rgb[1],
84 //          (int) rgb[2]) != ColorCalibrator\&.Color\&.Other) {
85 //        lcd\&.drawString("Object Detected", 0, 5);
86 //      } else {
87 //        // Draw whitespace on our display
88 //        lcd\&.drawString("                   ", 0, 5);
89 //      }
90 
91       lcd\&.drawString(String\&.format("%1$-10s", ColorCalibrator\&.getColor()\&.toString()), 0, 6);
92       lcd\&.drawString("A:" + numberFormat\&.format(sensdata\&.getA()), 0, 7);
93 
94       // lcd\&.drawString(String\&.format("(r: %f", rgb[0]), 0, 3);
95       // lcd\&.drawString(String\&.format("(g: %f", rgb[1]), 0, 4);
96       // lcd\&.drawString(String\&.format("(b: %f", rgb[2]), 0, 5);
97 
98       // This ensures that the data is updated only once every period
99       updateEnd = System\&.currentTimeMillis();
100       if (updateEnd - updateStart < DISPLAY_PERIOD) {
101         try {
102           Thread\&.sleep(DISPLAY_PERIOD - (updateEnd - updateStart));
103         } catch (InterruptedException e) {
104           e\&.printStackTrace();
105         }
106       }
107     } while ((updateEnd - tStart) <= timeout);
108   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
