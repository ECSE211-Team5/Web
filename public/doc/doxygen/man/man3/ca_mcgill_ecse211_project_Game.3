.TH "ca.mcgill.ecse211.project.Game" 3 "Tue Nov 27 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.Game
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBStatus\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "String \fBgetStatusFullName\fP ()"
.br
.ti -1c
.RI "\fBStatus\fP \fBgetStatus\fP ()"
.br
.ti -1c
.RI "boolean \fBready\fP (\fBUltrasonicLocalizer\fP us, \fBLightLocalizer\fP lgLoc)"
.br
.ti -1c
.RI "boolean \fBnavigateToTunnel\fP (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
.br
.ti -1c
.RI "boolean \fBnavigateToStart\fP (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
.br
.ti -1c
.RI "boolean \fBnavigateToAndSearcherTree\fP (\fBNavigation\fP nav, \fBRingSearcher\fP searcher)"
.br
.ti -1c
.RI "void \fBreadData\fP ()"
.br
.ti -1c
.RI "void \fBpreparation\fP ()  throws OdometerExceptions "
.br
.ti -1c
.RI "void \fBrunGame\fP ()  throws OdometerExceptions "
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBThreadControl\fP \fBrgbPoller\fP"
.br
.ti -1c
.RI "\fBThreadControl\fP \fBusPoller\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBleftMotor\fP"
.br
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBrightMotor\fP"
.br
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBsensorMotor\fP"
.br
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBrodMotor\fP"
.br
.ti -1c
.RI "static final double \fBTILE\fP = 30\&.48"
.br
.ti -1c
.RI "static final double \fBWHEEL_RAD\fP = 2\&.15"
.br
.ti -1c
.RI "static final double \fBTRACK\fP = 11\&.5"
.br
.ti -1c
.RI "static final double \fBSEN_DIS\fP = 4\&.2"
.br
.in -1c
.SH "Detailed Description"
.PP 
This singleton contains all the methods and structures necessary to start competing in a game
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 33 of file Game\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBStatus\fP ca\&.mcgill\&.ecse211\&.project\&.Game\&.getStatus ()"
This method gets the current status of our robot
.PP
\fBReturns:\fP
.RS 4
A \fBStatus\fP enumeration value 
.RE
.PP

.PP
Definition at line 62 of file Game\&.java\&.
.PP
.nf
62                             {
63     return status;
64   }
.fi
.SS "String ca\&.mcgill\&.ecse211\&.project\&.Game\&.getStatusFullName ()"
This method gets a string representation of the status of our robot
.PP
\fBReturns:\fP
.RS 4
A string of the status variable 
.RE
.PP

.PP
Definition at line 53 of file Game\&.java\&.
.PP
.nf
53                                     {
54     return status\&.toString();
55   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.navigateToAndSearcherTree (\fBNavigation\fP nav, \fBRingSearcher\fP searcher)"
This method navigates our robot to the tree and tries to find rings
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP

.PP
Definition at line 151 of file Game\&.java\&.
.PP
.nf
151                                                                                   {
152     boolean wasEventProcessed = false;
153 
154     Status aStatus = status;
155     switch (aStatus) {
156       case AtTunnel:
157         searchRing(nav, searcher);
158         setStatus(Status\&.AtTree);
159         wasEventProcessed = true;
160         break;
161       default:
162         // Other states do respond to this event
163         break;
164     }
165 
166     return wasEventProcessed;
167   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.navigateToStart (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
This method navigates our robot to the starting corner
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIInterruptedException\fP 
.RE
.PP

.PP
Definition at line 128 of file Game\&.java\&.
.PP
.nf
128                                                                                {
129     boolean wasEventProcessed = false;
130 
131     Status aStatus = status;
132     switch (aStatus) {
133       case AtTunnel:
134         navigateStart(navigation, searcher);
135         setStatus(Status\&.Idle);
136         wasEventProcessed = true;
137         break;
138       default:
139         // Other states do respond to this event
140         break;
141     }
142 
143     return wasEventProcessed;
144   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.navigateToTunnel (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
This method navigates our robot to the tunnel or search area
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP

.PP
Definition at line 99 of file Game\&.java\&.
.PP
.nf
99                                                                                 {
100     boolean wasEventProcessed = false;
101 
102     Status aStatus = status;
103     switch (aStatus) {
104       case Localized:
105         navigateTunnel(navigation);
106         setStatus(Status\&.AtTunnel);
107         wasEventProcessed = true;
108         break;
109       case AtTree:
110         navigateBackTunnel(navigation, searcher);
111         setStatus(Status\&.AtTunnel);
112         wasEventProcessed = true;
113         break;
114       default:
115         // Other states do respond to this event
116         break;
117     }
118 
119     return wasEventProcessed;
120   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Game\&.preparation () throws \fBOdometerExceptions\fP"
This method performs all the object instantiations and preparations necessary to get our robot to compete
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 349 of file Game\&.java\&.
.PP
.nf
349                                                       {
350     // Motor Objects, and Robot related parameters
351     Port usPort = LocalEV3\&.get()\&.getPort("S1");
352     // initialize multiple light ports in main
353     Port[] lgPorts = new Port[3];
354 
355     // Light sensor sensor stuff
356     lgPorts[0] = LocalEV3\&.get()\&.getPort("S2");
357     lgPorts[1] = LocalEV3\&.get()\&.getPort("S3");
358     lgPorts[2] = LocalEV3\&.get()\&.getPort("S4");
359     EV3ColorSensor[] lgSensors = new EV3ColorSensor[3];
360     for (int i = 0; i < lgSensors\&.length; i++) {
361       lgSensors[i] = new EV3ColorSensor(lgPorts[i]);
362     }
363 
364     Odometer odometer = Odometer\&.getOdometer(leftMotor, rightMotor, TRACK, WHEEL_RAD);
365 
366     // Sensor Related Stuff
367     SensorData sensorData = SensorData\&.getSensorData();
368 
369     // Ultrasonic sensor stuff
370     @SuppressWarnings("resource")
371     SensorModes usSensor = new EV3UltrasonicSensor(usPort);
372     SampleProvider usDistance = usSensor\&.getMode("Distance");
373     float[] usData = new float[usDistance\&.sampleSize()];
374 
375     SampleProvider backLight[] = new SampleProvider[2];
376     backLight[0] = lgSensors[0]\&.getRedMode();
377     backLight[1] = lgSensors[1]\&.getRedMode();
378 
379     // colour detection sensor
380     SampleProvider frontLight[] = new SampleProvider[1];
381     frontLight[0] = lgSensors[2]\&.getRGBMode();
382 
383     // TextLCD lcd = LocalEV3\&.get()\&.getTextLCD();
384     // Display odometryDisplay = new Display(lcd);
385     // // STEP 1: LOCALIZE to (1,1)
386     // // ButtonChoice left or right
387     // lcd\&.clear();
388     // lcd\&.drawString("< Left | Right >", 0, 0);
389     // lcd\&.drawString(" falling | rising ", 0, 1);
390     // lcd\&.drawString(" edge | edge ", 0, 2);
391     // lcd\&.drawString(" \\/ ", 0, 3);
392     // lcd\&.drawString(" Color Detection ", 0, 4);
393 
394     // Start odometer and odometer display
395     Thread odoThread = new Thread(odometer);
396     odoThread\&.start();
397     // Thread odoDisplayThread = new Thread(odometryDisplay);
398     // odoDisplayThread\&.start();
399     Sound\&.beep();
400     // Start ultrasonic and light sensors
401     usPoller = new UltrasonicPoller(usDistance, usData, sensorData);
402     Thread usThread = new Thread(usPoller);
403     usThread\&.start();
404     lightPoller = new LightPoller(backLight, new float[2][backLight[1]\&.sampleSize()], sensorData);
405     Thread lightThread = new Thread(lightPoller);
406     lightThread\&.start();
407 
408     rgbPoller = new RGBPoller(frontLight, new float[1][frontLight[0]\&.sampleSize()], sensorData);
409     Thread rgbThread = new Thread(rgbPoller);
410 
411     rgbThread\&.start();
412 
413 
414   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Game\&.readData ()"
This method reads data from the \fBWiFi\fP class (using another thread) 
.PP
Definition at line 245 of file Game\&.java\&.
.PP
.nf
245                          {
246     WiFi\&.readData();
247   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.ready (\fBUltrasonicLocalizer\fP us, \fBLightLocalizer\fP lgLoc)"
This method performs localizes our robot
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP

.PP
Definition at line 71 of file Game\&.java\&.
.PP
.nf
71                                                                      {
72     boolean wasEventProcessed = false;
73 
74     Status aStatus = status;
75     switch (aStatus) {
76       case Idle:
77         try {
78           localizeAndReadData(us, lgLoc);
79         } catch (OdometerExceptions e) {
80           e\&.printStackTrace();
81         }
82         setStatus(Status\&.Localized);
83         wasEventProcessed = true;
84         break;
85       default:
86         // Other states do respond to this event
87         break;
88     }
89     Sound\&.beep();
90     Sound\&.beep();
91     return wasEventProcessed;
92   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Game\&.runGame () throws \fBOdometerExceptions\fP"
This method is called when the after the robot has been prepared and is ready to compete
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 421 of file Game\&.java\&.
.PP
.nf
421                                                   {
422     GameParameters\&.Demo = DemoType\&.Beta;
423     // Start localizing
424     final Navigation navigation = new Navigation(leftMotor, rightMotor);
425     final UltrasonicLocalizer usLoc = new UltrasonicLocalizer(navigation, leftMotor, rightMotor);
426     final LightLocalizer lgLoc = new LightLocalizer(navigation, leftMotor, rightMotor);
427     final RingSearcher searcher = new RingSearcher(sensorMotor, rodMotor);
428 
429     Button\&.waitForAnyPress(); // Wait for button press to start
430     INSTANCE\&.ready(usLoc, lgLoc);
431 
432     // instantiate path finder
433     GameUtil\&.searchingFinder =
434         new GameUtil\&.PathFinder(GameParameters\&.Island_LL, GameParameters\&.Island_UR);
435     GameUtil\&.startingFinder = new GameUtil\&.PathFinder(GameParameters\&.US_LL, GameParameters\&.US_UR);
436     INSTANCE\&.navigateToTunnel(navigation, searcher);
437     INSTANCE\&.navigateToAndSearcherTree(navigation, searcher);
438     INSTANCE\&.navigateToTunnel(navigation, searcher);
439     INSTANCE\&.navigateToStart(navigation, searcher);
440   }
.fi
.SH "Member Data Documentation"
.PP 
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.leftMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("A"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the left motor connected to port A 
.PP
Definition at line 197 of file Game\&.java\&.
.SS "\fBThreadControl\fP ca\&.mcgill\&.ecse211\&.project\&.Game\&.rgbPoller"
This variable stores a ThreadController instance that controls our RGB sensor 
.PP
Definition at line 181 of file Game\&.java\&.
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.rightMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("D"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the right motor connected to port D 
.PP
Definition at line 204 of file Game\&.java\&.
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.rodMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("B"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the motor on the rod for collecting rings 
.PP
Definition at line 218 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.SEN_DIS = 4\&.2\fC [static]\fP"
This variable stores the distance between the light sensor and center of the robot in cm 
.PP
Definition at line 240 of file Game\&.java\&.
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.sensorMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("C"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the motor on storage rod 
.PP
Definition at line 211 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.TILE = 30\&.48\fC [static]\fP"
This variable stores the length of a tile in cm 
.PP
Definition at line 224 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.TRACK = 11\&.5\fC [static]\fP"
This variable holds the track distance between the center of the wheels in cm (measured and adjusted based on trial and error) 
.PP
Definition at line 235 of file Game\&.java\&.
.SS "\fBThreadControl\fP ca\&.mcgill\&.ecse211\&.project\&.Game\&.usPoller"
This variable stores a ThreadController instance that controls our ultrasonic sensor 
.PP
Definition at line 191 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.WHEEL_RAD = 2\&.15\fC [static]\fP"
This variable stores the radius of our wheels in cm 
.PP
Definition at line 229 of file Game\&.java\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
