.TH "ca.mcgill.ecse211.odometer.OdometryCorrection" 3 "Thu Nov 29 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.odometer.OdometryCorrection
.SH SYNOPSIS
.br
.PP
.PP
Inherits Runnable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOdometryCorrection\fP ()  throws OdometerExceptions "
.br
.ti -1c
.RI "void \fBrun\fP ()"
.br
.ti -1c
.RI "void \fBdoCorrection\fP (double angle)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class implements correction for the odometry on our robot using a light sensor\&.
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 20 of file OdometryCorrection\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.odometer\&.OdometryCorrection\&.OdometryCorrection () throws \fBOdometerExceptions\fP"
This is the class constructor for the \fBOdometryCorrection\fP class\&.
.PP
\fBExceptions:\fP
.RS 4
\fI\fBOdometerExceptions\fP\fP 
.RE
.PP

.PP
Definition at line 35 of file OdometryCorrection\&.java\&.
.PP
.nf
35                                                         {
36     // Utilize the singleton Odometer object instance for thread safety\&.
37     this\&.odometer = Odometer\&.getOdometer();
38   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometryCorrection\&.doCorrection (double angle)"
This method corrects our robot's \fBOdometer\fP readings
.PP
\fBParameters:\fP
.RS 4
\fIangle\fP The current angle that the robot is facing 
.RE
.PP

.PP
Definition at line 95 of file OdometryCorrection\&.java\&.
.PP
.nf
95                                          {
96     double[] position = odometer\&.getXYT();
97     // Check that our robot's angle is within certain bounds and correct odometer if required\&.
98     if (angle < 5 || angle > 355) {
99       int sensorCoor = (int) Math\&.round(position[1] - SENSOR_DIS / Game\&.TILE);
100       odometer\&.setY(sensorCoor + SENSOR_DIS / Game\&.TILE);
101     } else if (angle < 185 && angle > 175) {
102       int sensorCoor = (int) Math\&.round(position[1] + SENSOR_DIS / Game\&.TILE);
103       odometer\&.setY(sensorCoor - SENSOR_DIS / Game\&.TILE);
104     } else if (angle < 95 && angle > 85) {
105       int sensorCoor = (int) Math\&.round(position[0] - SENSOR_DIS / Game\&.TILE);
106       odometer\&.setX(sensorCoor + SENSOR_DIS / Game\&.TILE);
107     }
108   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometryCorrection\&.run ()"
This method is called when this \fBOdometryCorrection\fP object instance is started as a thread\&. Functionality wise it will correct the rotation and position of the robot once a black line is detected\&.
.PP
\fBExceptions:\fP
.RS 4
\fI\fBOdometerExceptions\fP\fP 
.RE
.PP

.PP
Definition at line 47 of file OdometryCorrection\&.java\&.
.PP
.nf
47                     {
48     long correctionStart, correctionEnd;
49     boolean onTopOfLine = false;
50 
51     while (true) {
52       correctionStart = System\&.currentTimeMillis();
53 
54       // Fetch the sample at offset 0
55       myColorSample\&.fetchSample(sampleColor, 0);
56 
57       // Check if our light sensor has read a black line and is not already on top of one
58       if (sampleColor[0] < LINE_COLOR_THRESHOLD && !onTopOfLine) {
59 
60         // New black line detected
61         Sound\&.beep();
62         onTopOfLine = true;
63 
64         double x = odometer\&.getXYT()[0];
65         double y = odometer\&.getXYT()[1];
66 
67         if (Math\&.abs(x % TILE_WIDTH) < Math\&.abs(y % TILE_WIDTH)) {
68           odometer\&.setX(Math\&.round(x / TILE_WIDTH) * TILE_WIDTH);
69         } else {
70           odometer\&.setY(Math\&.round(y / TILE_WIDTH) * TILE_WIDTH);
71         }
72 
73       } else if (sampleColor[0] > LINE_COLOR_THRESHOLD) {
74         // No longer on top of line, reset to false
75         onTopOfLine = false;
76       }
77 
78       // this ensure the odometry correction occurs only once every period
79       correctionEnd = System\&.currentTimeMillis();
80       if (correctionEnd - correctionStart < CORRECTION_PERIOD) {
81         try {
82           Thread\&.sleep(CORRECTION_PERIOD - (correctionEnd - correctionStart));
83         } catch (InterruptedException e) {
84           // there is nothing to be done here
85         }
86       }
87     }
88   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
