.TH "ca.mcgill.ecse211.odometer.OdometerData" 3 "Mon Nov 26 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.odometer.OdometerData
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBca\&.mcgill\&.ecse211\&.odometer\&.Odometer\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "double [] \fBgetXYT\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (double dx, double dy, double dtheta)"
.br
.ti -1c
.RI "void \fBsetXYT\fP (double x, double y, double theta)"
.br
.ti -1c
.RI "void \fBsetX\fP (double x)"
.br
.ti -1c
.RI "void \fBsetY\fP (double y)"
.br
.ti -1c
.RI "void \fBsetTheta\fP (double theta)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static synchronized \fBOdometerData\fP \fBgetOdometerData\fP ()  throws OdometerExceptions "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBOdometerData\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class stores and provides thread safe access to the odometer data\&.
.PP
\fBAuthor:\fP
.RS 4
Rodrigo Silva 
.PP
Dirk Dubois 
.PP
Derek Yu 
.PP
Karim El-Baba 
.PP
Michael Smith 
.RE
.PP

.PP
Definition at line 16 of file OdometerData\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.OdometerData ()\fC [protected]\fP"
Default constructor\&. The constructor is private\&. A factory is used instead such that only one instance of this class is ever created\&. 
.PP
Definition at line 47 of file OdometerData\&.java\&.
.PP
.nf
47                            {
48     this\&.x = 0;
49     this\&.y = 0;
50     this\&.theta = 0;
51   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "static synchronized \fBOdometerData\fP ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.getOdometerData () throws \fBOdometerExceptions\fP\fC [static]\fP"
\fBOdometerData\fP factory\&. Returns an \fBOdometerData\fP instance and makes sure that only one instance is ever created\&. If the user tries to instantiate multiple objects, the method throws a MultipleOdometerDataException\&.
.PP
\fBReturns:\fP
.RS 4
An \fBOdometerData\fP object 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBOdometerExceptions\fP\fP 
.RE
.PP

.PP
Definition at line 61 of file OdometerData\&.java\&.
.PP
.nf
61                                                                                       {
62     if (odoData != null) { // Return existing object
63       return odoData;
64     } else if (numberOfIntances < MAX_INSTANCES) { // create object and
65                                                    // return it
66       odoData = new OdometerData();
67       numberOfIntances += 1;
68       return odoData;
69     } else {
70       throw new OdometerExceptions("Only one intance of the Odometer can be created\&.");
71     }
72 
73   }
.fi
.SS "double [] ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.getXYT ()"
Return the Odomometer data\&. 
.PP
Writes the current position and orientation of the robot onto the odoData array\&. odoData[0] = x, odoData[1] = y; odoData[2] = theta;
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP the array to store the odometer data 
.RE
.PP
\fBReturns:\fP
.RS 4
the odometer data\&. 
.RE
.PP

.PP
Definition at line 84 of file OdometerData\&.java\&.
.PP
.nf
84                            {
85     double[] position = new double[4];
86     lock\&.lock();
87     try {
88       while (isReseting) { // If a reset operation is being executed, wait
89         // until it is over\&.
90         doneReseting\&.await(); // Using await() is lighter on the CPU
91         // than simple busy wait\&.
92       }
93 
94       position[0] = x;
95       position[1] = y;
96       position[2] = theta;
97 
98     } catch (InterruptedException e) {
99       // Print exception to screen
100       e\&.printStackTrace();
101     } finally {
102       lock\&.unlock();
103     }
104 
105     return position;
106   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setTheta (double theta)"
Overrides theta\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fItheta\fP the value of theta 
.RE
.PP

.PP
Definition at line 197 of file OdometerData\&.java\&.
.PP
.nf
197                                      {
198     lock\&.lock();
199     isReseting = true;
200     try {
201       this\&.theta = theta;
202       isReseting = false; // Done reseting
203       doneReseting\&.signalAll(); // Let the other threads know that you are
204                                 // done reseting
205     } finally {
206       lock\&.unlock();
207     }
208   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setX (double x)"
Overrides x\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value of x 
.RE
.PP

.PP
Definition at line 161 of file OdometerData\&.java\&.
.PP
.nf
161                              {
162     lock\&.lock();
163     isReseting = true;
164     try {
165       this\&.x = x;
166       isReseting = false; // Done reseting
167       doneReseting\&.signalAll(); // Let the other threads know that you are
168                                 // done reseting
169     } finally {
170       lock\&.unlock();
171     }
172   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setXYT (double x, double y, double theta)"
Overrides the values of x, y and theta\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value of x 
.br
\fIy\fP the value of y 
.br
\fItheta\fP the value of theta 
.RE
.PP

.PP
Definition at line 141 of file OdometerData\&.java\&.
.PP
.nf
141                                                        {
142     lock\&.lock();
143     isReseting = true;
144     try {
145       this\&.x = x;
146       this\&.y = y;
147       this\&.theta = theta;
148       isReseting = false; // Done reseting
149       doneReseting\&.signalAll(); // Let the other threads know that you are
150                                 // done reseting
151     } finally {
152       lock\&.unlock();
153     }
154   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setY (double y)"
Overrides y\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fIy\fP the value of y 
.RE
.PP

.PP
Definition at line 179 of file OdometerData\&.java\&.
.PP
.nf
179                              {
180     lock\&.lock();
181     isReseting = true;
182     try {
183       this\&.y = y;
184       isReseting = false; // Done reseting
185       doneReseting\&.signalAll(); // Let the other threads know that you are
186                                 // done reseting
187     } finally {
188       lock\&.unlock();
189     }
190   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.update (double dx, double dy, double dtheta)"
Adds dx, dy and dtheta to the current values of x, y and theta, respectively\&. Useful for odometry\&.
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP 
.br
\fIdy\fP 
.br
\fIdtheta\fP 
.RE
.PP

.PP
Definition at line 116 of file OdometerData\&.java\&.
.PP
.nf
116                                                           {
117     lock\&.lock();
118     isReseting = true;
119     try {
120       x += dx;
121       y += dy;
122       theta = (theta + (360 + dtheta) % 360) % 360; // keeps the updates
123                                                     // within 360
124                                                     // degrees
125       isReseting = false; // Done reseting
126       doneReseting\&.signalAll(); // Let the other threads know that you are
127                                 // done reseting
128     } finally {
129       lock\&.unlock();
130     }
131 
132   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
