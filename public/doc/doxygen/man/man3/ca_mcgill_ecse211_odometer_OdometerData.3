.TH "ca.mcgill.ecse211.odometer.OdometerData" 3 "Tue Nov 27 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.odometer.OdometerData
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBca\&.mcgill\&.ecse211\&.odometer\&.Odometer\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "double [] \fBgetXYT\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP (double dx, double dy, double dtheta)"
.br
.ti -1c
.RI "void \fBsetXYT\fP (double x, double y, double theta)"
.br
.ti -1c
.RI "void \fBsetX\fP (double x)"
.br
.ti -1c
.RI "void \fBsetY\fP (double y)"
.br
.ti -1c
.RI "void \fBsetTheta\fP (double theta)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static synchronized \fBOdometerData\fP \fBgetOdometerData\fP ()  throws OdometerExceptions "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBOdometerData\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class stores and provides thread safe access to data required used by the \fBOdometer\fP classes\&.
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 17 of file OdometerData\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.OdometerData ()\fC [protected]\fP"
This is the class constructor for the \fBOdometerData\fP class\&. It cannot be instantiated externally\&. A factory is used instead such that only one instance of this class is ever created\&. 
.PP
Definition at line 47 of file OdometerData\&.java\&.
.PP
.nf
47                            {
48     this\&.x = 0;
49     this\&.y = 0;
50     this\&.theta = 0;
51   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "static synchronized \fBOdometerData\fP ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.getOdometerData () throws \fBOdometerExceptions\fP\fC [static]\fP"
This method returns an \fBOdometerData\fP instance and makes sure that only one instance is ever created\&.
.PP
\fBReturns:\fP
.RS 4
An \fBOdometerData\fP object 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBOdometerExceptions\fP\fP 
.RE
.PP

.PP
Definition at line 60 of file OdometerData\&.java\&.
.PP
.nf
60                                                                                       {
61     if (odoData != null) { // Return existing object
62       return odoData;
63     } else if (numberOfIntances < MAX_INSTANCES) {
64       // create object and return it
65       odoData = new OdometerData();
66       numberOfIntances += 1;
67       return odoData;
68     } else {
69       throw new OdometerExceptions("Only one intance of the Odometer can be created\&.");
70     }
71   }
.fi
.SS "double [] ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.getXYT ()"
This method returns the \fBOdometer\fP data\&. Writes the current position and orientation of the robot onto the odoData array\&. odoData[0] = x, odoData[1] = y; odoData[2] = theta;
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP the array to store the odometer data 
.RE
.PP
\fBReturns:\fP
.RS 4
the odometer data\&. 
.RE
.PP

.PP
Definition at line 81 of file OdometerData\&.java\&.
.PP
.nf
81                            {
82     double[] position = new double[4];
83     lock\&.lock();
84     try {
85       while (isReseting) { // If a reset operation is being executed, wait
86         // until it is over\&.
87         doneReseting\&.await(); // Using await() is lighter on the CPU
88         // than simple busy wait\&.
89       }
90 
91       position[0] = x;
92       position[1] = y;
93       position[2] = theta;
94 
95     } catch (InterruptedException e) {
96       // Print exception to screen
97       e\&.printStackTrace();
98     } finally {
99       lock\&.unlock();
100     }
101 
102     return position;
103   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setTheta (double theta)"
Overrides theta\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fItheta\fP the value of theta 
.RE
.PP

.PP
Definition at line 194 of file OdometerData\&.java\&.
.PP
.nf
194                                      {
195     lock\&.lock();
196     isReseting = true;
197     try {
198       this\&.theta = theta;
199       isReseting = false; // Done reseting
200       doneReseting\&.signalAll(); // Let the other threads know that you are
201                                 // done reseting
202     } finally {
203       lock\&.unlock();
204     }
205   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setX (double x)"
Overrides x\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value of x 
.RE
.PP

.PP
Definition at line 158 of file OdometerData\&.java\&.
.PP
.nf
158                              {
159     lock\&.lock();
160     isReseting = true;
161     try {
162       this\&.x = x;
163       isReseting = false; // Done reseting
164       doneReseting\&.signalAll(); // Let the other threads know that you are
165                                 // done reseting
166     } finally {
167       lock\&.unlock();
168     }
169   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setXYT (double x, double y, double theta)"
Overrides the values of x, y and theta\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value of x 
.br
\fIy\fP the value of y 
.br
\fItheta\fP the value of theta 
.RE
.PP

.PP
Definition at line 138 of file OdometerData\&.java\&.
.PP
.nf
138                                                        {
139     lock\&.lock();
140     isReseting = true;
141     try {
142       this\&.x = x;
143       this\&.y = y;
144       this\&.theta = theta;
145       isReseting = false; // Done reseting
146       doneReseting\&.signalAll(); // Let the other threads know that you are
147                                 // done reseting
148     } finally {
149       lock\&.unlock();
150     }
151   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.setY (double y)"
Overrides y\&. Use for odometry correction\&.
.PP
\fBParameters:\fP
.RS 4
\fIy\fP the value of y 
.RE
.PP

.PP
Definition at line 176 of file OdometerData\&.java\&.
.PP
.nf
176                              {
177     lock\&.lock();
178     isReseting = true;
179     try {
180       this\&.y = y;
181       isReseting = false; // Done reseting
182       doneReseting\&.signalAll(); // Let the other threads know that you are
183                                 // done reseting
184     } finally {
185       lock\&.unlock();
186     }
187   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.odometer\&.OdometerData\&.update (double dx, double dy, double dtheta)"
Adds dx, dy and dtheta to the current values of x, y and theta, respectively\&. Useful for odometry\&.
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP 
.br
\fIdy\fP 
.br
\fIdtheta\fP 
.RE
.PP

.PP
Definition at line 113 of file OdometerData\&.java\&.
.PP
.nf
113                                                           {
114     lock\&.lock();
115     isReseting = true;
116     try {
117       x += dx;
118       y += dy;
119       theta = (theta + (360 + dtheta) % 360) % 360; // keeps the updates
120                                                     // within 360
121                                                     // degrees
122       isReseting = false; // Done reseting
123       doneReseting\&.signalAll(); // Let the other threads know that you are
124                                 // done reseting
125     } finally {
126       lock\&.unlock();
127     }
128 
129   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
