.TH "ca.mcgill.ecse211.threads.SensorData" 3 "Tue Nov 27 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.threads.SensorData
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "double \fBgetD\fP ()"
.br
.ti -1c
.RI "double [] \fBgetL\fP ()"
.br
.ti -1c
.RI "int [] \fBgetRGB\fP ()"
.br
.ti -1c
.RI "double \fBgetA\fP ()"
.br
.ti -1c
.RI "void \fBsetD\fP (double d)"
.br
.ti -1c
.RI "void \fBsetA\fP (double a)"
.br
.ti -1c
.RI "void \fBsetRGB\fP (int r, int g, int b)"
.br
.ti -1c
.RI "void \fBsetL\fP (double l[])"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static synchronized \fBSensorData\fP \fBgetSensorData\fP ()  throws OdometerExceptions "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSensorData\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class implements methods to manage data from our sensors
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 17 of file SensorData\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.SensorData ()\fC [protected]\fP"
Default constructor\&. The constructor is private\&. A factory is used instead such that only one instance of this class is ever created\&. 
.PP
Definition at line 44 of file SensorData\&.java\&.
.PP
.nf
44                          {
45     // Default distance value is 40 cm from any walls\&.
46     this\&.distance = 40;
47     // Default light value is 0
48     this\&.lights = new double[2];
49     rgb = new int[3];
50     for (int j = 0; j < rgb\&.length; j++) {
51       rgb[j] = 0;
52     }
53   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "double ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getA ()"
(deprecated, not using) This method returns the currently stored angle value from the gyro sensor
.PP
\fBReturns:\fP
.RS 4
The current angle value 
.RE
.PP

.PP
Definition at line 122 of file SensorData\&.java\&.
.PP
.nf
122                        {
123     return angle;
124   }
.fi
.SS "double ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getD ()"
Return the ultraSonic distance data\&.
.PP
\fBReturns:\fP
.RS 4
the sensor data\&. 
.RE
.PP

.PP
Definition at line 82 of file SensorData\&.java\&.
.PP
.nf
82                        {
83     return distance;
84   }
.fi
.SS "double [] ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getL ()"
get the light value data from the two light sensors (protected by lightLock)
.PP
\fBReturns:\fP
.RS 4
: data from light sensor 
.RE
.PP

.PP
Definition at line 91 of file SensorData\&.java\&.
.PP
.nf
91                          {
92     // lock the lock for light sensor value
93     lightLock\&.lock();
94     try {
95       return lights\&.clone();
96     } finally {
97       lightLock\&.unlock();
98     }
99 
100   }
.fi
.SS "int [] ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getRGB ()"
get the rgb data for light sensor (protected by rgb lock)
.PP
\fBReturns:\fP
.RS 4
: rgb data 
.RE
.PP

.PP
Definition at line 107 of file SensorData\&.java\&.
.PP
.nf
107                         {
108     rgbLock\&.lock();
109     try {
110       return rgb\&.clone();
111     } finally {
112       rgbLock\&.unlock();
113     }
114   }
.fi
.SS "static synchronized \fBSensorData\fP ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getSensorData () throws \fBOdometerExceptions\fP\fC [static]\fP"
OdometerData factory\&. Returns an OdometerData instance and makes sure that only one instance is ever created\&. If the user tries to instantiate multiple objects, the method throws a MultipleOdometerDataException\&.
.PP
\fBReturns:\fP
.RS 4
An OdometerData object 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 63 of file SensorData\&.java\&.
.PP
.nf
63                                                                                   {
64     if (sensorData != null) { // Return existing object
65       return sensorData;
66     } else if (numberOfIntances < MAX_INSTANCES) { // create object and
67                                                    // return it
68       sensorData = new SensorData();
69       numberOfIntances += 1;
70       return sensorData;
71     } else {
72       throw new OdometerExceptions("Only one intance of the SensorData can be created\&.");
73     }
74 
75   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setA (double a)"
(deprecated not usings) This method overwrites the angle value\&.
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The value to overwrite angle with 
.RE
.PP

.PP
Definition at line 140 of file SensorData\&.java\&.
.PP
.nf
140                              {
141     this\&.angle = a;
142   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setD (double d)"
This method overwrites the distance value\&. Use for ultrasonic sensor\&.
.PP
\fBParameters:\fP
.RS 4
\fId\fP The value to overwrite distance with 
.RE
.PP

.PP
Definition at line 131 of file SensorData\&.java\&.
.PP
.nf
131                              {
132     this\&.distance = d;
133   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setL (double l[])"
This method overwrites the light value\&. (protected by light lock)
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The value to overwrite the current light value with 
.RE
.PP

.PP
Definition at line 167 of file SensorData\&.java\&.
.PP
.nf
167                                {
168     try {
169       lightLock\&.lock();
170       this\&.lights[0] = l[0];
171       this\&.lights[1] = l[1];
172     } finally {
173       lightLock\&.unlock();
174     }
175   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setRGB (int r, int g, int b)"
set rgb data for color sensor (protected by rgb lock)
.PP
\fBParameters:\fP
.RS 4
\fIr\fP red value 
.br
\fIg\fP green value 
.br
\fIb\fP blue value 
.RE
.PP

.PP
Definition at line 151 of file SensorData\&.java\&.
.PP
.nf
151                                           {
152     try {
153       rgbLock\&.lock();
154       rgb[0] = r;
155       rgb[1] = g;
156       rgb[2] = b;
157     } finally {
158       rgbLock\&.unlock();
159     }
160   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
