.TH "ca.mcgill.ecse211.threads.SensorData" 3 "Thu Nov 29 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.threads.SensorData
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "double \fBgetD\fP ()"
.br
.ti -1c
.RI "double [] \fBgetL\fP ()"
.br
.ti -1c
.RI "int [] \fBgetRGB\fP ()"
.br
.ti -1c
.RI "double \fBgetA\fP ()"
.br
.ti -1c
.RI "void \fBsetD\fP (double d)"
.br
.ti -1c
.RI "void \fBsetA\fP (double a)"
.br
.ti -1c
.RI "void \fBsetRGB\fP (int r, int g, int b)"
.br
.ti -1c
.RI "void \fBsetL\fP (double l[])"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static synchronized \fBSensorData\fP \fBgetSensorData\fP ()  throws OdometerExceptions "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSensorData\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class implements methods to manage data from our sensors
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 17 of file SensorData\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.SensorData ()\fC [protected]\fP"
This is the class constructor for the \fBSensorData\fP class\&. It cannot be instantiated externally\&. A factory is used instead such that only one instance of this class is ever created\&. 
.PP
Definition at line 44 of file SensorData\&.java\&.
.PP
.nf
44                          {
45     // Default distance value is 40 cm from any walls\&.
46     this\&.distance = 40;
47     // Default light value is 0
48     this\&.lights = new double[2];
49     rgb = new int[3];
50     for (int j = 0; j < rgb\&.length; j++) {
51       rgb[j] = 0;
52     }
53   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "double ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getA ()"
(deprecated) This method returns the currently stored angle value
.PP
\fBReturns:\fP
.RS 4
The current angle value 
.RE
.PP

.PP
Definition at line 117 of file SensorData\&.java\&.
.PP
.nf
117                        {
118     return angle;
119   }
.fi
.SS "double ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getD ()"
This method returns ultrasonic sensor distance data\&.
.PP
\fBReturns:\fP
.RS 4
The distance detected by an ultrasonic sensor\&. 
.RE
.PP

.PP
Definition at line 79 of file SensorData\&.java\&.
.PP
.nf
79                        {
80     return distance;
81   }
.fi
.SS "double [] ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getL ()"
This thread safe method gets light data from two light sensors\&.
.PP
\fBReturns:\fP
.RS 4
An array of light sensor data 
.RE
.PP

.PP
Definition at line 88 of file SensorData\&.java\&.
.PP
.nf
88                          {
89     // lock the lock for light sensor value
90     lightLock\&.lock();
91     try {
92       return lights\&.clone();
93     } finally {
94       lightLock\&.unlock();
95     }
96   }
.fi
.SS "int [] ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getRGB ()"
This thread safe method gets rgb data from a light sensor
.PP
\fBReturns:\fP
.RS 4
An array of rgb data 
.RE
.PP

.PP
Definition at line 103 of file SensorData\&.java\&.
.PP
.nf
103                         {
104     rgbLock\&.lock();
105     try {
106       return rgb\&.clone();
107     } finally {
108       rgbLock\&.unlock();
109     }
110   }
.fi
.SS "static synchronized \fBSensorData\fP ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.getSensorData () throws \fBOdometerExceptions\fP\fC [static]\fP"
This method returns an \fBSensorData\fP instance and makes sure that only one instance is ever created\&.
.PP
\fBReturns:\fP
.RS 4
A \fBSensorData\fP object 
.RE
.PP

.PP
Definition at line 61 of file SensorData\&.java\&.
.PP
.nf
61                                                                                   {
62     if (sensorData != null) { // Return existing object
63       return sensorData;
64     } else if (numberOfIntances < MAX_INSTANCES) { // create object and
65                                                    // return it
66       sensorData = new SensorData();
67       numberOfIntances += 1;
68       return sensorData;
69     } else {
70       throw new OdometerExceptions("Only one intance of the SensorData can be created\&.");
71     }
72   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setA (double a)"
(deprecated) This method overwrites the last angle value\&.
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The value to overwrite angle with 
.RE
.PP

.PP
Definition at line 135 of file SensorData\&.java\&.
.PP
.nf
135                              {
136     this\&.angle = a;
137   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setD (double d)"
This method overwrites the last distance value\&. Used for ultrasonic sensor data
.PP
\fBParameters:\fP
.RS 4
\fId\fP The value to overwrite distance with 
.RE
.PP

.PP
Definition at line 126 of file SensorData\&.java\&.
.PP
.nf
126                              {
127     this\&.distance = d;
128   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setL (double l[])"
This thread safe method overwrites the last light value
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The value to overwrite the last light value with 
.RE
.PP

.PP
Definition at line 162 of file SensorData\&.java\&.
.PP
.nf
162                                {
163     try {
164       lightLock\&.lock();
165       this\&.lights[0] = l[0];
166       this\&.lights[1] = l[1];
167     } finally {
168       lightLock\&.unlock();
169     }
170   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.threads\&.SensorData\&.setRGB (int r, int g, int b)"
This thread safe method stores rgb data from a color sensor
.PP
\fBParameters:\fP
.RS 4
\fIr\fP An integer that denotes the red value to store 
.br
\fIg\fP An integer that denotes the green value to store 
.br
\fIb\fP An integer that denotes the blue value to store 
.RE
.PP

.PP
Definition at line 146 of file SensorData\&.java\&.
.PP
.nf
146                                           {
147     try {
148       rgbLock\&.lock();
149       rgb[0] = r;
150       rgb[1] = g;
151       rgb[2] = b;
152     } finally {
153       rgbLock\&.unlock();
154     }
155   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
